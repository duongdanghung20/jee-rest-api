package app;

import javax.annotation.PostConstruct;
import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.persistence.NoResultException;
import javax.transaction.Transactional;
import java.io.IOException;
import java.io.Serializable;
import java.net.URISyntaxException;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;


@Transactional
@RequestScoped
public class QueryService implements Serializable {
    Statement statement;
    private final static Logger LOGGER = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);

    public QueryService() {};

    @PostConstruct
    public void init() throws SQLException {
        String urlDB = "jdbc:derby://localhost:1527/appDB;create=true";
        String username = "admin";
        String password = "admin";
        Connection con = DriverManager.getConnection(urlDB, username, password);
        statement = con.createStatement();

        // Create table enseignant if not exist
        try {
            String queryCreateEnseignant =
                    "CREATE TABLE enseignant (" +
                            "id INTEGER GENERATED BY DEFAULT AS IDENTITY, " +
                            "firstName VARCHAR(255) NOT NULL, " +
                            "lastName VARCHAR(255) NOT NULL, " +
                            "numHours DOUBLE NOT NULL, " +
                            "eq FLOAT NOT NULL, " +
                            "dept VARCHAR(255) NOT NULL, " +
                            "service VARCHAR(255) NOT NULL, " +
                            "numDisHours INTEGER NOT NULL, " +
                            "maxOvtHours INTEGER NOT NULL, " +
                            "PRIMARY KEY (id)" +
                    ")";
            statement.execute(queryCreateEnseignant);
        } catch (SQLException e) {
            if (e.getSQLState().equalsIgnoreCase("X0Y32")) {
                LOGGER.info("Ignore create table enseignant because already existed ##");
            }
            else {
                LOGGER.warning(e.getMessage());
            }
        }
        LOGGER.info("Creation");

        try {
            String queryCreateAssignment =
                    "CREATE TABLE assignment (" +
                            "id INTEGER GENERATED BY DEFAULT AS IDENTITY, " +
                            "courseId INTEGER NOT NULL, " +
                            "teacherId INTEGER NOT NULL, " +
                            "groupType VARCHAR(255) NOT NULL, " +
                            "groupNumber INTEGER NOT NULL, " +
                            "numHours DOUBLE NOT NULL, " +
                            "PRIMARY KEY (id)" +
                            ")";
            statement.execute(queryCreateAssignment);
        } catch (SQLException e) {
            if (e.getSQLState().equalsIgnoreCase("X0Y32")) {
                LOGGER.info("Ignore create table assignment because already existed ##");
            }
            else {
                LOGGER.warning(e.getMessage());
            }
        }
        LOGGER.info("Creation!!");

        // Create table ue if not exist
        try {
            String queryCreateUE =
                    "CREATE TABLE ue (" +
                            "id INTEGER GENERATED BY DEFAULT AS IDENTITY, " +
                            "name VARCHAR(255) NOT NULL, " +
                            "semester INTEGER NOT NULL, " +
                            "numCMHours DOUBLE NOT NULL, " +
                            "numTDHours DOUBLE NOT NULL, " +
                            "numTPHours DOUBLE NOT NULL, " +
                            "numStudents INTEGER NOT NULL, " +
                            "thresholdCM INTEGER NOT NULL, " +
                            "thresholdTD INTEGER NOT NULL, " +
                            "thresholdTP INTEGER NOT NULL, " +
                            "numCMGroups INTEGER NOT NULL, " +
                            "numTDGroups INTEGER NOT NULL, " +
                            "numTPGroups INTEGER NOT NULL, " +
                            "PRIMARY KEY (id)" +
                            ")";
            statement.execute(queryCreateUE);
        } catch (SQLException e) {
            if (e.getSQLState().equalsIgnoreCase("X0Y32")) {
                LOGGER.info("Ignore create table ue because already existed ##");
            }
            else {
                LOGGER.warning(e.getMessage());
            }
        }
        LOGGER.info("Creation UE!");
    }

    public void addTeacher(String firstName,
                           String lastName,
                           float eq,
                           String dept,
                           String service,
                           int numDisHours,
                           int maxOvtHours) throws SQLException {
        Enseignant teacher = new Enseignant(firstName, lastName, eq, dept, service, numDisHours, maxOvtHours);
        String queryAddTeacher = String.format(
                "INSERT INTO enseignant (firstName, lastName, numHours, eq, dept, service, numDisHours, maxOvtHours) " +
                        "VALUES ('%s', '%s', %f, %f, '%s', '%s', %d, %d)",
                teacher.getFirstName(),
                teacher.getLastName(),
                teacher.getNumHours(),
                teacher.getEq(),
                teacher.getDept(),
                teacher.getService(),
                teacher.getNumDisHours(),
                teacher.getMaxOvtHours());
        statement.execute(queryAddTeacher);
    }

    public void updateTeacherById(int id,
                                  String firstName,
                                  String lastName,
                                  float eq,
                                  String dept,
                                  String service,
                                  int numDisHours,
                                  int maxOvtHours) {
        try {
            double numHours = 0;
            if (service.equalsIgnoreCase("Enseignant-chercheur")) {
                numHours = 192;
            }
            else if (service.equalsIgnoreCase("Enseignant")) {
                numHours = 384;
            }
            else if (service.equalsIgnoreCase("Doctorant")) {
                numHours = 64;
                maxOvtHours = 0;
            }
            String query = String.format("UPDATE enseignant SET firstName = '%s', lastName = '%s', numHours = %f, eq = %f, dept = '%s', service = '%s', numDisHours = %d, maxOvtHours = %d " +
                    "WHERE id = %d", firstName, lastName, numHours, eq, dept, service, numDisHours, maxOvtHours, id);
            statement.execute(query);
        }
        catch (NoResultException e) {
            throw new NoResultException("Teacher not found!");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteTeacher(int id) {
        try {
            String query = String.format("DELETE FROM enseignant WHERE id = %d", id);
            statement.execute(query);

            List<Assignment> thisTeacherAssignments = searchAssignmentByTeacherId(id);
            for (Assignment assignment : thisTeacherAssignments) {
                updateAssignmentById(assignment.getId(),-1);
            }
        }
        catch (NoResultException e) {
            throw new NoResultException("Teacher not found!");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<Enseignant> obtainTeacherList() throws SQLException {
        String query = "SELECT * FROM enseignant";
        return getTeachers(query);
    }

    public List<Enseignant> searchTeacherById(int id) throws NoResultException {
        try {
            String query = String.format("SELECT * FROM enseignant WHERE id = %d", id);
            return getTeachers(query);
        }
        catch (NoResultException e) {
            throw new NoResultException("Teacher not found!");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<Enseignant> searchTeacherByName(String name) throws NoResultException {
        try {
            String query = String.format("SELECT * FROM enseignant WHERE LOWER(firstName) LIKE ('%%' || '%s' || '%%') OR LOWER(lastName) LIKE ('%%' || '%s' || '%%')", name.toLowerCase(), name.toLowerCase());
            return getTeachers(query);
        }
        catch (NoResultException e) {
            throw new NoResultException("Teacher not found!");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    private List<Enseignant> getTeachers(String query) throws SQLException {
        ResultSet res = statement.executeQuery(query);
        ArrayList<Enseignant> teacherList = new ArrayList<Enseignant>();
        while (res.next()) {
            Enseignant teacher = new Enseignant(
                    res.getString("firstName"),
                    res.getString("lastName"),
                    res.getFloat("eq"),
                    res.getString("dept"),
                    res.getString("service"),
                    res.getInt("numDisHours"),
                    res.getInt("maxOvtHours"));
            teacher.setId(res.getInt("id"));
            teacherList.add(teacher);
        }
        return teacherList;
    }


    public void addCourse(String name,
                          int semester,
                          double numCMHours,
                          double numTDHours,
                          double numTPHours,
                          int numStudents,
                          int thresholdCM,
                          int thresholdTD,
                          int thresholdTP) throws SQLException, URISyntaxException, IOException {

        UE course = new UE(name, semester, numCMHours, numTDHours, numTPHours,
                numStudents, thresholdCM, thresholdTD, thresholdTP);

        String queryAddUE = String.format(
                "INSERT INTO ue (name, semester, numCMHours, numTDHours, numTPHours, numStudents, thresholdCM, thresholdTD, thresholdTP, numCMGroups, numTDGroups, numTPGroups) " +
                        "VALUES ('%s', %d, %f, %f, %f, %d, %d, %d, %d, %d, %d, %d)",
                course.getName(),
                course.getSemester(),
                course.getNumCMHours(),
                course.getNumTDHours(),
                course.getNumTPHours(),
                course.getNumStudents(),
                course.getThresholdCM(),
                course.getThresholdTD(),
                course.getThresholdTP(),
                course.getNumCMGroups(),
                course.getNumTDGroups(),
                course.getNumTPGroups()
        );
        statement.execute(queryAddUE);

        // Initialize course to the "assignment" table
        UE latestCourseAdded = searchLatestInsertedCourse();

        for (int i = 1; i <= latestCourseAdded.getNumCMGroups(); i++) {
            addAssignment(latestCourseAdded.getId(), -1, "CM", i, latestCourseAdded.getNumCMHours());
        }
        for (int i = 1; i <= latestCourseAdded.getNumTDGroups(); i++) {
            addAssignment(latestCourseAdded.getId(), -1, "TD", i, latestCourseAdded.getNumTDHours());
        }
        for (int i = 1; i <= latestCourseAdded.getNumTPGroups(); i++) {
            addAssignment(latestCourseAdded.getId(), -1, "TP", i, latestCourseAdded.getNumTPHours());
        }

        LOGGER.info("Added new course ####################################!");
    }

    public void updateCourseById(int id, String name, int semester, double numCMHours, double numTDHours, double numTPHours, int numStudents, int thresholdCM, int thresholdTD, int thresholdTP) {
        try {
            UE ueUpdate = searchCourseById(id).get(0);
            int prevNumCMGroups = ueUpdate.getNumCMGroups();
            int prevNumTDGroups = ueUpdate.getNumTDGroups();
            int prevNumTPGroups = ueUpdate.getNumTPGroups();

            int numCMGroups = (int) Math.ceil((float) numStudents / thresholdCM);
            int numTDGroups = (int) Math.ceil((float) numStudents / thresholdTD);
            int numTPGroups = (int) Math.ceil((float) numStudents / thresholdTP);

            String query = String.format(
                    "UPDATE ue SET name = '%s', semester = %d, numCMHours = %f, numTDHours = %f, numTPHours = %f, numStudents = %d, thresholdCM = %d, thresholdTD = %d, thresholdTP = %d, numCMGroups = %d, numTDGroups = %d, numTPGroups = %d " +
                            "WHERE id = %d", name, semester, numCMHours, numTDHours, numTPHours, numStudents, thresholdCM, thresholdTD, thresholdTP, numCMGroups, numTDGroups, numTPGroups, id);
            statement.execute(query);

            int differenceCM = numCMGroups - prevNumCMGroups;
            int differenceTD = numTDGroups - prevNumTDGroups;
            int differenceTP = numTPGroups - prevNumTPGroups;

            if (differenceCM > 0) {
                for (int i = prevNumCMGroups + 1; i <= numCMGroups; i++) {
                    addAssignment(id, -1, "CM", i, ueUpdate.getNumCMHours());
                }
            }
            else if (differenceCM < 0) {
                List<Assignment> thisCourseAssignments = searchAssignmentByCourseId(id);
                for (Assignment assignment : thisCourseAssignments) {
                    if (assignment.getGroupType().equalsIgnoreCase("CM") && assignment.getGroupNumber() > numCMGroups) {
                        deleteAssignment(assignment.getId());
                    }
                }
            }

            if (differenceTD > 0) {
                for (int i = prevNumTDGroups + 1; i <= numTDGroups; i++) {
                    addAssignment(id, -1, "TD", i, ueUpdate.getNumTDHours());
                }
            }
            else if (differenceTD < 0) {
                List<Assignment> thisCourseAssignments = searchAssignmentByCourseId(id);
                for (Assignment assignment : thisCourseAssignments) {
                    if (assignment.getGroupType().equalsIgnoreCase("TD") && assignment.getGroupNumber() > numTDGroups) {
                        deleteAssignment(assignment.getId());
                    }
                }
            }

            if (differenceTP > 0) {
                for (int i = prevNumTPGroups + 1; i <= numTPGroups; i++) {
                    addAssignment(id, -1, "TP", i, ueUpdate.getNumTPHours());
                }
            }
            else if (differenceTP < 0) {
                List<Assignment> thisCourseAssignments = searchAssignmentByCourseId(id);
                for (Assignment assignment : thisCourseAssignments) {
                    if (assignment.getGroupType().equalsIgnoreCase("TP") && assignment.getGroupNumber() > numTPGroups) {
                        deleteAssignment(assignment.getId());
                    }
                }
            }


        } catch (NoResultException e) {
            throw new NoResultException("Course not found!");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteCourse(int id) {
        try {
            String query = String.format("DELETE FROM ue WHERE id = %d", id);
            statement.execute(query);
            deleteAssignmentByCourseId(id);
        } catch (NoResultException e) {
            throw new NoResultException("Course not found!");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<UE> obtainCourseList() throws SQLException {
        String query = "SELECT * FROM ue";
        return getCourses(query);
    }

    public List<UE> searchCourseById(int id) throws NoResultException {
        try {
            String query = String.format("SELECT * FROM ue WHERE id = %d", id);
            return getCourses(query);
        }
        catch (NoResultException e) {
            throw new NoResultException("Course not found!");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<UE> searchCourseByName(String name) throws NoResultException {
        try {
            String query = String.format("SELECT * FROM ue WHERE LOWER(name) LIKE ('%%' || '%s' || '%%')", name.toLowerCase());
            return getCourses(query);
        }
        catch (NoResultException e) {
            throw new NoResultException("Course not found!");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<UE> searchCourseBySemester(int semester) throws NoResultException {
        try {
            String query = String.format("SELECT * FROM ue WHERE semester = %d", semester);
            return getCourses(query);
        }
        catch (NoResultException e) {
            throw new NoResultException("Course not found!");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public UE searchLatestInsertedCourse() throws NoResultException {
        try {
            String query = "SELECT * FROM ue WHERE id = ( SELECT MAX(id) FROM ue )";
            return getCourses(query).get(0);
        }
        catch (NoResultException e) {
            throw new NoResultException("Course not found!");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    private List<UE> getCourses(String query) throws SQLException {
        ResultSet res = statement.executeQuery(query);
        ArrayList<UE> courseList = new ArrayList<UE>();
        while (res.next()) {
            UE course = new UE(
                    res.getString("name"),
                    res.getInt("semester"),
                    res.getDouble("numCMHours"),
                    res.getDouble("numTDHours"),
                    res.getDouble("numTPHours"),
                    res.getInt("numStudents"),
                    res.getInt("thresholdCM"),
                    res.getInt("thresholdTD"),
                    res.getInt("thresholdTP"));
            course.setId(res.getInt("id"));
            courseList.add(course);
        }
        return courseList;
    }


    public void addAssignment(int courseId, int teacherId, String groupType, int groupNumber, double numHours) throws SQLException {

        Assignment a = new Assignment(courseId, teacherId, groupType, groupNumber, numHours);

        String queryAddAssignment = String.format(
                "INSERT INTO assignment (courseId, teacherId, groupType, groupNumber, numHours) " +
                        "VALUES (%d, %d, '%s', %d, %f)",
                a.getCourseId(),
                a.getTeacherId(),
                a.getGroupType(),
                a.getGroupNumber(),
                a.getNumHours()
        );
        statement.execute(queryAddAssignment);
        LOGGER.info("Added new assignment ####################################!");
    }

    public void updateAssignmentById(int id, int teacherId) {
        try {
            String query = String.format(
                    "UPDATE assignment SET teacherId = %d WHERE id = %d", teacherId, id);
            statement.execute(query);
        }
        catch (NoResultException e) {
            throw new NoResultException("Assignment not found!");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteAssignment(int id) {
        try {
            String query = String.format("DELETE FROM assignment WHERE id = %d", id);
            statement.execute(query);
        }
        catch (NoResultException e) {
            throw new NoResultException("Assignment not found!");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteAssignmentByCourseId(int courseId) {
        try {
            String query = String.format("DELETE FROM assignment WHERE courseId = %d", courseId);
            statement.execute(query);
        }
        catch (NoResultException e) {
            throw new NoResultException("Assignment not found!");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<Assignment> obtainAssignmentList() throws SQLException {
        String query = "SELECT * FROM assignment";
        return getAssignments(query);
    }

    public List<Assignment> searchAssignmentById(int id) throws NoResultException {
        try {
            String query = String.format("SELECT * FROM assignment WHERE id = %d", id);
            return getAssignments(query);
        }
        catch (NoResultException e) {
            throw new NoResultException("Assignment not found!");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<Assignment> searchAssignmentByCourseId(int courseId) throws NoResultException {
        try {
            String query = String.format("SELECT * FROM assignment WHERE courseId = %d", courseId);
            return getAssignments(query);
        }
        catch (NoResultException e) {
            throw new NoResultException("Assignment not found!");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<Assignment> searchAssignmentByTeacherId(int teacherId) throws NoResultException {
        try {
            String query = String.format("SELECT * FROM assignment WHERE teacherId = %d", teacherId);
            return getAssignments(query);
        }
        catch (NoResultException e) {
            throw new NoResultException("Assignment not found!");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<Assignment> searchUnassigned() throws NoResultException {
        try {
            String query = "SELECT * FROM assignment WHERE teacherId = -1";
            return getAssignments(query);
        }
        catch (NoResultException e) {
            throw new NoResultException("Assignment not found!");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    private List<Assignment> getAssignments(String query) throws SQLException {
        ResultSet res = statement.executeQuery(query);
        ArrayList<Assignment> assignmentList = new ArrayList<>();
        while (res.next()) {
            Assignment assignment = new Assignment(
                    res.getInt("courseId"),
                    res.getInt("teacherId"),
                    res.getString("groupType"),
                    res.getInt("groupNumber"),
                    res.getDouble("numHours"));
            assignment.setId(res.getInt("id"));
            assignmentList.add(assignment);
        }
        return assignmentList;
    }
}
